Section 12: File Upload

step 1: setup - create app, html file, view class, urls,py
    step 1.1: create a new app "python3 mamage.py startapp profiles"
    step 1.2: copy static and template folder 
    step 1.3: In views.py, create class and assign the render template
    step 1.4: create urls.py file and create urlparttens and assign path.
    step 1.5: register the app name in settings.py
    step 1.6: In main project urls.py include the path - "path("profiles/", include("profiles.urls"))"

step 2: 164: make file upload work
    step 2.1: In create_profile.html, add method, enctype, action, csrf token, name to input.
(Note: When you are writing client-side code: use multipart/form-data when your form includes any <input type="file"> elements)
    step 2.2: In views.py, temp create print statemnt to check the file upload is working or not, and add return HTTP responce 
referance: file upload class - https://docs.djangoproject.com/en/3.2/ref/files/uploads/

step 3: 165: Storing Uploaded Files Native Approach
    step 3.1: In views.py, create a function store_file using with statment as we are handling the file. - this will work only for jpg file.
(Note: with statment referance: https://www.geeksforgeeks.org/with-statement-in-python/)
    step 3.2: insted of printing the image name, use the function store_file, now create a temp folder and try upload a file now.

step 4: 166: Adding a Form with a Filefield
    step 4.1: create forms.py, create class and assign forms.filefield to user_image.
    step 4.2: In views.py, assign the created form in get function and post function, any how it wont help us to save the image
    step 4.3: in create_profile.html, replace input tag with form intergartion.

step 5: 167: Using Models for File Storage
    step 5.1: create model with models.filefield(upload_to = "image") image is a folder name where saves the image we upload.
    step 5.2: create a folder to the root project to save the image "uploads", as mentioned in step 5.1, django will create a image folder inside uploads and save the image file.
    step 5.3: In settings.py, create MEDIA_ROOT = BASE_DIR /'uploads', which allowes to search the created folder.
    step 5.4: In views.py, call the created model in post function as shown and save the image.

step 6: 168: using ImageField
insted of Filefield, we can use ImageField, it will allow only image file to upload, it wont allow any other file type, also we can specify size of the image.
    step 6.1: In models.py change Filefield to ImageField.

step 7: 169: Using a CreateView
    step 7.1: In views.py. import from django.views.generic.edit import CreateView
    step 7.2: create new class using CreateView,  now you can remove all other class below, also no need of forms class, just model class is enough.

step 8: 170: accessing the image file, which was uploded
    step 8.1: create Profile_image.html.
    step 8.2: In views.py, add new calss using generic ListView.
    step 8.3: In urls.py, add the path for created view class.
    step 8.4: in Profile_image.html, add unordered list and use for loop to generate the image, in image tag we have to use loopname.modelfieldname.url to access the images.
171: step 8.5: In settings.py, add "MEDIA_URL"
    step 8.6: In main project urls.py, import and assign to urlparttens
                from django.conf.urls.static import static
                from django.conf import settings
                and add static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)
                now reload to access the images.



Section 13: 176, 177 all about sessions
step:9:
sessions are meddleware between client and server, which saves cookies in the client browser. 
normal session cookies saved for 2 weeks, however we can change the time as required in seconds
on settings you have to make sure 2 things which allowes to work, 1. in MIDDLEWARE- django.contrib.sessions.middleware.SessionMiddleware', 2.  INSTALLED_APPS - 'django.contrib.sessions' are precent.
    step 9.1: session default can be changed in settings.py at the add SESSION_COOKIE_AGE = 120, i.e 120 = 2min 
more options can be found of https://docs.djangoproject.com/en/3.2/topics/http/sessions/

step:10: 178, 179: adding new view , storing data in session
step 10.1: In details.html, create a fav button inside the form tag, and input type = hidden and value = id
step 10.2: In views.py, create new class AddFavReview, define post function and retutn the HttpResponceRedirect to same page
step 10.3: In urls.py, create a new path for the new calss, above the detailview path.