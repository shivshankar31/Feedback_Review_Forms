
step 0: create project: virtualenv, startproject, git repo, app, db file.  

step 0.1: make folder as 'feedback_Review_Form' in prefered location.
step 0.2: open terminal and create virtual env - 'mkvirtualenv projectname<feedback_Review_Form>'
step 0.3: pip3 install django
step 0.4: django-admin startproject feedback
step 0.5: github
    git init
    git add .
    git commit -m "first commit test"
    git branch -M master
    git remote add origin https://github.com/shivshankar31/Feedback_Review_Forms.git
    git push origin master
step 0.6: open in vscode and add git:remote
step 0.7: from terminal inside virtualenv, create app - python3 manage.py startapp review
step 0.8: create db.sqlite3 file under main project file

step 1: 132: Setting up new review app,  
    step 1.1: create new app as review - 'python3 manage.py startapp review'
    step 1.2: create templates folder inside app, also create review folder inside templates.
    step 1.3: define a review in views.py file.
    step 1.4: In urls.py, import path, views and create the urlpatterns. 
    step 1.5: In main project urls.py file, import 'include' function, and add the path of created app urls.py file. 
    step 1.6: In settings.py file, include app name to INSTALLED_APP list.
    step 1.7: create review.html file inside template/review folder.

step 2: 133: adding test form in html.
    step 2.1: create test form in review.html file
    Step 2.2: add the created html file to views.py to render
now run the server to check the form display.

step 3: 134: GET and POST
    step 3.1: for us we need to post the data.

step 4: 135: CSRF protection to protect user data form.
it generats token for verification.
    step 4.1: add csrf_token to the form to protect from hackers

step 5: 136: handling form subimission, redirect after submitting
    step 5.1: in review.html, add action to the form so that it will redirect to another page, by default it will load the localhost.
    step 5.2: create thankyou.html file to use it after the data is submited.
    step 5.3: as we get GET and POST in the same url, we need to identify using IF statment and redirect to thankyou.html, we can also render inside if statment 
                but it is not a good pratice. create a seperate function for thankyou and render the html page there.
    step 5.4: inclding HttpResponceRedirect we can add the extension url over there.
    step 5.6: include PATH in urls.py and call the thankyou function.

137: this is about manual form handling, insted we are using djanog form class in the next video.

step 6: 138: create forms.py, create class and insert form on the index.html
    step 6.1: create forms.py file and import forms form django, and create class ReviewForm, 
    step 6.2: call the created form class inside view.py forms.ReviewForm now, validate post or get method, also is_valid is a inbuilt method in forms, render the html 
                nested if is used to check post, get and is_valid
    step 6.3: remove input field and call the form inside html, remove input field, as all the fields are mentioned in the forms.py 
    
step 7: 139: validation with django forms
    STEP 7.1: add else part so that form is validated befor it reloads, by using this user entered datas will be saved if the validation got filed, user will not be forced 
              to renter the date again and again.

step 8: 140:customizing the form controls
    step:8.1: in forms.py, we can chage the lable, max_length, required(*)- by default it set to be true, error_massages

step 9: 141: Customizing the Rendered HTML
    step 9.1: insted of rendering the complete form, we can render form fields one by one and change the allignment using '.'
    step 9.2: Also, we can create seprate <div> class to assign style as well. also we can use if condition inside the class.

step 10: 142: Adding styles.css to form
    step 10.1: add static and review folder. create styles.css file.
    step 10.2: in reviews.html, load static and add the css file link to stylesheet with {% static ""%}

step 11: 143: adding more fields
    step 11.1: in forms.py, add feedbask field and rating field.
    step 11.2: in review.html, use for loop to to generate the fields automaticly.

step 12: 144: save to database
    step 12.1: create review model in models.py and migrate to create table to the DB
    step 12.2: import the created model to views.py
    step 12.3: call the model into a variable and retrive the cleaned_data of each field and save to a list.
    step 12.4: now save the variable. now populate some data and submit to view Db table.

step 13: 145: ModelForm - Auto generate form from models
    step 13.1: In forms.py. comment the old class and create a new class with "forms.ModelForm" as class argument. A nested class "class Meta:" is created and assign the created models.py
    step 13.2: fields, exception are used to select fields to create form.  

step 14: 146: ModelForm creating labels , error_massages
    step 14.1: In forms.py, under class meta: add lable and error_message 

we can follow both ways, which ever is convenent, its all upto us.

step 15: 147: saving data with ModelForm
    step 15.1: remove all cleaned data and save the form, model will save the data and save that to DB.

step 16: 148: convert views.py into class view
    step 16.1: in views.py, import django.view Views and create class ReviewView(View), and create get and post function.
    step 16.2: in urls.py, add .as_view().

151: In this section we will be learning about Templete views, list & detail views, Form view - create, update, delete views

step 17: 152: Add base templet and extends to other existing page
    step 17.1: create base.html under review
    step 17.2: extend review.html file with the base.html
    step 17.3: extend thankyou.html file with the base.html
    step 17.3: In views.py, post function return HttpResponceRedirect fixed

step 18: 153: TempleteView
    step 18.1: import - from django.views.generic.base import TemplateView
    step 18.2: in views.py, remove thankyou function and create ThankyouView class and call TemplateView as arg
    step 18.3: use the keyword template_name to render the html page, no need to use retutn or render methods, 
    step 18.4: we can convert static to dynamic HTML page using predefind get_context_data function
    step 18.5: add {{message }} to thankyou.html.

step 19: 154: Review list - using TemplateView
    step 19.1: create new reviewlist.html, and extend from base
    step 19.2: In views.py, create a new class ReviewList and pass TemplateView argument.
    step 19.3: assign template_name and call get_context_data function, now call objects.all() and populate the data.
    step 19.4: add new path in urls.py 

step 20: 155: detail review view
    step 20.1: create details.html and extend from base.html
    step 20.2: In views.py, create class for detailview and assign the template_name, call get_context_data function, use **kwargs from the function in get() populate the id using primarykey (Pk)
    step 20.3: In urls.py, assign the path, also generate the extension using <int:id>.
    
step 20: 156: method 2 ListView
    step 20.1: In views.py, import "from django.views.generic import ListView" 
    step 20.2: create a class with ListView and assign the html, assign model = Review (model class name), this will populate the list, but change the for loop to "object_list". if you like to user alis name use context_object_name varibal and assign the prefered name.

step 21: 157: menthod 2 DetailView
    step 21.1: import DetailView form django.views.generic 
    step 21.2: In views.py, create new class and user DetailView as arg, template_name, model need to assign.
    step 21.3: In urls.py, convert <int:id> to <int:pk>
